[{"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/index.js":"1","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/reportWebVitals.js":"2","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/App.js":"3","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/login/index.js":"4","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/signup/index.js":"5","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/index.js":"6","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/LeftPanel.js":"7","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/RightPanel.js":"8","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/MiddlePanel.js":"9","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/index.js":"10","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/reducers/index.js":"11","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/sagas/index.js":"12","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/types/index.js":"13","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/actions/index.js":"14","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/helpers/Allchannels.js":"15","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/MobileNav.js":"16","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/MobileAddchannel.js":"17"},{"size":478,"mtime":1607437439223,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1607339921251,"results":"20","hashOfConfig":"19"},{"size":698,"mtime":1607517785084,"results":"21","hashOfConfig":"19"},{"size":2410,"mtime":1607523845179,"results":"22","hashOfConfig":"19"},{"size":1941,"mtime":1607536288463,"results":"23","hashOfConfig":"19"},{"size":1060,"mtime":1607542281146,"results":"24","hashOfConfig":"19"},{"size":1369,"mtime":1607545114632,"results":"25","hashOfConfig":"19"},{"size":1570,"mtime":1607545722906,"results":"26","hashOfConfig":"19"},{"size":1749,"mtime":1607547051240,"results":"27","hashOfConfig":"19"},{"size":473,"mtime":1607525169720,"results":"28","hashOfConfig":"19"},{"size":1791,"mtime":1607546384375,"results":"29","hashOfConfig":"19"},{"size":5498,"mtime":1607553658011,"results":"30","hashOfConfig":"19"},{"size":1080,"mtime":1607546087594,"results":"31","hashOfConfig":"19"},{"size":828,"mtime":1607546726799,"results":"32","hashOfConfig":"19"},{"size":1617,"mtime":1607545827285,"results":"33","hashOfConfig":"19"},{"size":1964,"mtime":1607547427308,"results":"34","hashOfConfig":"19"},{"size":1461,"mtime":1607547075816,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"l6n9px",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"38"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"38"},"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/index.js",[],["81","82"],"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/reportWebVitals.js",[],"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/App.js",[],"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/login/index.js",[],"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/signup/index.js",["83"],"import React, { useState } from \"react\";\nimport { login, signup } from \"../../redux/actions\";\nimport \"../../sass/login/_login.scss\";\nimport { useDispatch, connect } from \"react-redux\";\n\nfunction Index({ errors }) {\n  const dispatch = useDispatch();\n  const [data, setData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setData((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const submit = (e) => {\n    dispatch(signup(data));\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"login_container\">\n      <div className=\"top-shape\"></div>\n      <div className=\"small-circle\"></div>\n      <div className=\"login-form-container\">\n        <div className=\"login_heading\">\n          <h2>Signup</h2>\n        </div>\n        <p>Welcome, Create an account.</p>\n        {errors.map(error => (\n          <label className=\"error\">\n            {error}\n          </label>\n        ))}\n        <form>\n          <div className=\"input-box\">\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={data.username}\n              required\n              onChange={handleChange}\n            />\n            <label className=\"input-label\">username</label>\n          </div>\n          <div className=\"input-box\">\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={data.password}\n              required\n              onChange={handleChange}\n            />\n            <label className=\"input-label\">password</label>\n          </div>\n          <button onClick={submit}>Signup</button>\n        </form>\n        <p>\n          {\" \"}\n          Already have an account ? <a href=\"/login\">Login</a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  errors: state.Reducer.signup,\n});\n\nexport default connect(mapStateToProps, {})(Index);\n","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/index.js",[],"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/LeftPanel.js",["84"],"import React, { useEffect } from \"react\";\nimport \"../../sass/dashboard/_dashboard.scss\";\nimport Avatar from \"../../imgs/pet.jpeg\";\nimport decode from \"jwt-decode\";\nimport { getTokenLocalstorage } from \"../../redux/sagas\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { show_all_channels } from \"../../redux/actions\";\n\n\nfunction LeftPanel({ username,show_channels, show_all_channels }) {\n\n  const dispatch = useDispatch()\n\n  //check if logged in\n  useEffect(() => {\n    let token = getTokenLocalstorage();\n    let data = decode(token);\n    const date = new Date(0);\n    date.setUTCSeconds(data.exp);\n    if (!data.username && date < new Date()) {\n      localStorage.clear();\n      window.location.href = \"/login\";\n    }\n  }, []);\n\n  const logout = () => {\n    localStorage.clear();\n    window.location.href = \"/login\";\n  };\n\n  const allchannels = () => {\n    show_all_channels();\n  };\n\n  return (\n    <div className=\"left-panel\">\n      <img src={Avatar} alt=\"Avatar\" />\n      <h3>{username}</h3>\n      <ul>\n        <li onClick={allchannels}>{show_channels ? 'Hide':\"add channel\"}</li>\n      </ul>\n      <div onClick={logout} className=\"logout\">\n        Logout\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  show_channels: state.Reducer.show_channels,\n});\n\nexport default connect(mapStateToProps, { show_all_channels })(LeftPanel);\n","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/RightPanel.js",["85","86"],"import React, { useEffect, useState } from \"react\";\nimport \"../../sass/dashboard/_dashboard.scss\";\nimport Care from \"../../imgs/care.png\";\nimport Goat from \"../../imgs/goat.png\";\nimport Cat from \"../../imgs/cat.png\";\nimport Dog from \"../../imgs/dog.png\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { get_my_channels } from \"../../redux/actions\";\n//<a href='https://pngtree.com/so/care'>care png from pngtree.com</a>\nfunction RightPanel({ my_channels, get_my_channels }) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(get_my_channels());\n  }, []);\n\n  const getImage = (animal) => {\n    switch (animal) {\n      case \"Dog\":\n        return Dog;\n      case \"Goat\":\n        return Goat;\n      case \"Cat\":\n        return Cat;\n      default:\n        return Dog;\n    }\n  };\n\n  return (\n    <div className=\"right-panel\">\n      <div className=\"board\">\n        <img src={Care} alt=\"care\" />\n      </div>\n      <div className=\"second-board\">\n        <h3>My Channels</h3>\n        <ul>\n          {my_channels[0] !== \"Something went wrong.\" ? my_channels.map((channel) => (\n            <li>\n              <img src={getImage(channel)} alt=\"dog\" />\n              {channel}\n            </li>\n          )):  <label style={{\n              textAlign:\"center\",\n              color:\"orangered\"\n          }}>\n          {my_channels}\n        </label> }\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  my_channels: state.Reducer.my_channels,\n});\n\nexport default connect(mapStateToProps, { get_my_channels })(RightPanel);\n","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/MiddlePanel.js",["87","88"],"import React, { useState } from \"react\";\nimport \"../../sass/dashboard/_dashboard.scss\";\nimport Goat from \"../../imgs/goat.png\";\nimport Cat from \"../../imgs/cat.png\";\nimport Dog from \"../../imgs/dog.png\";\nimport Allchannels from \"../helpers/Allchannels\";\nimport { connect } from \"react-redux\";\nimport MobileAddchannel from \"./MobileAddchannel\";\n\nfunction MiddlePanel({ show_channels, show_mobile }) {\n  const [query, setQuery] = useState(\"\");\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setQuery(value);\n  };\n\n  return (\n    <div className=\"middle-panel\">\n      <input\n        name=\"search\"\n        value={query}\n        onChange={handleChange}\n        placeholder=\"Search\"\n      />\n\n      {show_channels ? (\n        <Allchannels />\n      ) : (\n        show_mobile ?\n        <MobileAddchannel /> \n        :\n        <>\n          <h4>Channel Updates</h4>\n          <div className=\"update-box\">\n            <div className=\"update\">\n              <h3>Goats</h3>\n              <img src={Goat} alt=\"Goat\" />\n            </div>\n            <div className=\"update-info\">\n              <h2>Updtate on Goats</h2>\n              <p>\n                Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy\n                text ever since the 1500s, when an unknown printer took a galley\n                of type and scrambled it to make a type specimen book.\n              </p>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  show_channels: state.Reducer.show_channels,\n  show_mobile:state.Reducer.show_my_channels_mobile\n});\n\nexport default connect(mapStateToProps, {})(MiddlePanel);\n","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/index.js",[],"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/reducers/index.js",["89","90"],"import sagas from \"../sagas\";\nimport {\n    ADD_TO_CHANNEL_FAILURE,\n    ADD_TO_CHANNEL_SUCCESS,\n    GET_ALL_CHANNELS_FAILURE,\n    GET_ALL_CHANNELS_SUCCESS,\n    GET_MY_CHANNELS_FAILURE,\n    GET_MY_CHANNELS_SUCCESS,\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  SHOW_ALL_CHANNELS,\n  SHOW_MY_CHANNELS_MOBILE,\n  SIGNUP_FAILURE,\n  SIGNUP_SUCCESS,\n} from \"../types\";\n\nconst initialState = {\n  login: \"\",\n  signup: [],\n  signin: [],\n  show_channels:false,\n  username: \"\",\n  channels: [],\n  my_channels: [],\n  is_add_success:\"\",\n  show_my_channels_mobile:false\n};\n\nconst AppReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case SIGNUP_FAILURE:\n      state.signup = payload;\n      return { ...state };\n    case LOGIN_SUCCESS:\n      state.login = payload;\n      return {\n        ...state,\n      };\n    case LOGIN_FAILURE:\n      state.signin = payload;\n      return { ...state };\n    case GET_MY_CHANNELS_SUCCESS:\n        state.my_channels = payload\n        return {...state}\n    case GET_MY_CHANNELS_FAILURE:\n        state.my_channels = payload\n        return {...state}\n    case SHOW_ALL_CHANNELS:\n        state.show_channels = !state.show_channels\n        return {...state}\n    case GET_ALL_CHANNELS_SUCCESS:\n        state.channels = payload\n        return {...state}\n    case GET_ALL_CHANNELS_FAILURE:\n        state.channels = payload\n        return  {...state}\n    case ADD_TO_CHANNEL_SUCCESS:\n        state.is_add_success = payload\n        return {...state}\n    case ADD_TO_CHANNEL_FAILURE:\n        state.is_add_success = payload\n        return {...state}\n    case SHOW_MY_CHANNELS_MOBILE:\n        state.show_my_channels_mobile = !state.show_my_channels_mobile\n        return {...state}\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nexport default AppReducer;\n","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/sagas/index.js",["91","92"],"import { put, all, call, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport decode from \"jwt-decode\";\nimport {\n  LOGIN_SAGA,\n  SIGNUP_SAGA,\n  SIGNUP_FAILURE,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  GET_MY_CHANNELS_SAGA,\n  GET_MY_CHANNELS_SUCCESS,\n  GET_MY_CHANNELS_FAILURE,\n  SHOW_ALL_CHANNELS,\n  SHOW_ALL_CHANNELS_SAGA,\n  GET_ALL_CHANNELS_SAGA,\n  GET_ALL_CHANNELS_SUCCESS,\n  GET_ALL_CHANNELS_FAILURE,\n  ADD_CHANNEL_SAGA,\n  ADD_TO_CHANNEL_SUCCESS,\n  ADD_TO_CHANNEL_FAILURE,\n  SHOW_MY_CHANNELS_MOBILE_SAGA,\n  SHOW_MY_CHANNELS_MOBILE,\n} from \"../types\";\n\nconst BASE_URL = \"https://youngstars-server.herokuapp.com\";\n\nexport const storeTokenLocalstorage = (token) => {\n  localStorage.setItem(\"token\", token);\n};\n\nexport const getTokenLocalstorage = () => {\n  let token = localStorage.getItem(\"token\");\n  return token;\n};\n\n//workers\nexport function* login_worker({ payload }) {\n  try {\n    const response = yield fetch(`${BASE_URL}/login`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    });\n\n    const json = yield response.json();\n    if (json.message === \"Login success\") {\n      yield storeTokenLocalstorage(json.data.token);\n      yield put({\n        type: LOGIN_SUCCESS,\n        payload: decode(getTokenLocalstorage()).username,\n      });\n      yield (window.location.href = \"/dashboard\");\n    } else {\n      yield put({ type: LOGIN_FAILURE, payload: json.message });\n    }\n  } catch (error) {\n    yield put({ type: LOGIN_FAILURE, payload: [\"Something went wrong...\"] });\n  }\n}\n\nexport function* signup_worker(action) {\n  try {\n    const response = yield fetch(`${BASE_URL}/signup`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(action.payload),\n    });\n    const json = yield response.json();\n    if (json.message === \"Successfully created user\") {\n      window.location.href = \"/login\";\n    } else {\n      yield put({ type: SIGNUP_FAILURE, payload: json.message });\n    }\n  } catch (err) {}\n}\n\nexport function* get_my_channels_worker(action) {\n  try {\n    const response = yield fetch(\n      `${BASE_URL}/channels/my-channels?username=${\n        decode(getTokenLocalstorage()).username\n      }`,\n      {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${getTokenLocalstorage()}`,\n        },\n      }\n    );\n    const data = yield response.json();\n    if (data.message && data.message === \"success\") {\n      yield put({ type: GET_MY_CHANNELS_SUCCESS, payload: data.data });\n    } else {\n      yield put({\n        type: GET_MY_CHANNELS_FAILURE,\n        payload: [\"Something went wrong.\"],\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* all_channels_worker(action) {\n  yield put({ type: SHOW_ALL_CHANNELS, payload: true });\n}\n\nexport function* get_all_channels_worker() {\n  try {\n    const response = yield fetch(`${BASE_URL}/channels`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${getTokenLocalstorage()}`,\n      },\n    });\n\n    const json = yield response.json();\n    if (json.message && json.message === \"Success\") {\n      yield put({ type: GET_ALL_CHANNELS_SUCCESS, payload: json.data });\n    } else {\n      yield put({\n        type: GET_ALL_CHANNELS_FAILURE,\n        payload: [\"Something went wrong.\"],\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* add_channel_worker({ payload }) {\n  try {\n    const response = yield fetch(`${BASE_URL}/channels`, {\n      method: \"PUT\",\n      mode: \"cors\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${getTokenLocalstorage()}`,\n      },\n      body:JSON.stringify({subscribe_to:payload})\n    });\n    const json = yield response.json()\n    if(json.message && json.data.nModified === 1) {\n        yield put({type:ADD_TO_CHANNEL_SUCCESS, payload:\"successfully added\"})\n        yield setTimeout(() => window.location.reload(), 4000)\n    }\n    else if(json.code == 500) {\n        yield put({type:ADD_TO_CHANNEL_FAILURE, payload:\"Duplicate Subscriptions\"})\n    }\n    else{\n      return\n    }\n  } catch (error) {}\n}\n\nexport function* show_my_channels_mobile_worker(action) {\n  yield put({type:SHOW_MY_CHANNELS_MOBILE, payload:true})\n\n}\n\n//watchers\nexport function* login_Watcher() {\n  yield takeEvery(LOGIN_SAGA, login_worker);\n}\n\nexport function* signup_watcher() {\n  yield takeEvery(SIGNUP_SAGA, signup_worker);\n}\n\nexport function* get_my_channels_watcher() {\n  yield takeEvery(GET_MY_CHANNELS_SAGA, get_my_channels_worker);\n}\n\nexport function* all_channels_watcher() {\n  yield takeEvery(SHOW_ALL_CHANNELS_SAGA, all_channels_worker);\n}\n\nexport function* get_all_channels_watcher() {\n  yield takeLatest(GET_ALL_CHANNELS_SAGA, get_all_channels_worker);\n}\n\nexport function* add_channel_watcher() {\n  yield takeLatest(ADD_CHANNEL_SAGA, add_channel_worker);\n}\n\nexport function* show_my_channels_mobile_watcher() {\n  yield takeEvery(SHOW_MY_CHANNELS_MOBILE_SAGA, show_my_channels_mobile_worker)\n}\n\nexport default function* sagas() {\n  yield all([\n    login_Watcher(),\n    signup_watcher(),\n    get_my_channels_watcher(),\n    all_channels_watcher(),\n    get_all_channels_watcher(),\n    add_channel_watcher(),\n    show_my_channels_mobile_watcher()\n  ]);\n}\n","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/types/index.js",[],["93","94"],"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/redux/actions/index.js",[],"/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/helpers/Allchannels.js",["95","96","97"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { add_channel, get_all_channels } from \"../../redux/actions\";\nimport \"../../sass/_globals.scss\";\n\nfunction Allchannels({ channels, get_all_channels, add_channel, message }) {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(get_all_channels());\n  }, [dispatch]);\n\n  const [data, setData] = useState([]);\n\n  const handleChange = (e) => {\n    const { name, checked, value } = e.target;\n    let val = data.find((val) => val === value);\n    if (!val) {\n      setData((state) => [...state, value]);\n    } else {\n      const new_data = data.filter((val) => val !== value);\n      setData(new_data);\n    }\n  };\n\n  const onSubmit = (e) => {\n    add_channel(data);\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"all-channels\">\n      <h2>All channels</h2>\n      <span style={{\n        color:message === \"successfully added\"?\"limegreen\":\"orangered\"\n      }}>{message}</span>\n      <ul>\n        {channels.map((channel, index) => (\n          <li key={index}>\n            {channel.name}\n            <input\n              type=\"checkbox\"\n              value={channel.name}\n              checked={data[channel.name]}\n              onChange={handleChange}\n            />\n          </li>\n        ))}\n      </ul>\n      <button onClick={onSubmit}>Submit</button>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  channels: state.Reducer.channels,\n  message: state.Reducer.is_add_success,\n});\n\nexport default connect(mapStateToProps, { get_all_channels, add_channel })(\n  Allchannels\n);\n","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/MobileNav.js",["98"],"import React, { useState, useEffect } from \"react\";\nimport \"../../sass/dashboard/_dashboard.scss\";\nimport decode from \"jwt-decode\";\nimport { getTokenLocalstorage } from \"../../redux/sagas\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { show_all_channels, show_my_channels_mobile } from \"../../redux/actions\";\n\nfunction MobileNav({\n    show_all_channels,\n    show_channels,\n    show_my_channels_mobile,\n    show_mobile\n}) {\n  const [state, setState] = useState(false);\n\n  const toggle = () => {\n    setState((state) => !state);\n  };\n\n  useEffect(() => {\n    let token = getTokenLocalstorage();\n    let data = decode(token);\n    const date = new Date(0);\n    date.setUTCSeconds(data.exp);\n    if (!data.username && date < new Date()) {\n      localStorage.clear();\n      window.location.href = \"/login\";\n    }\n  }, []);\n\n  const logout = () => {\n    localStorage.clear();\n    window.location.href = \"/login\";\n  };\n\n  const allchannels = () => {\n    show_all_channels();\n  };\n\n  const toggle2 = () => {\n      show_my_channels_mobile();\n  }\n\n  return (\n    <nav>\n      <div onClick={toggle} className=\"mobile-menu-box\">\n        <div className=\"menu\"></div>\n        <div className=\"menu\"></div>\n        <div className=\"menu\"></div>\n      </div>\n      <div\n        className=\"list\"\n        style={{\n          height: state ? \"100px\" : \"0\",\n          transition: \"height 500ms ease\",\n        }}\n      >\n        <div onClick={allchannels} className=\"list-item\">{show_channels ? 'Hide':\"Add channel\"}</div>\n    <div onClick={toggle2} className=\"list-item\">{show_mobile ? \"Hide\": \"My channels\"}</div>\n        <div onClick={logout} className=\"list-item\">\n          logout\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  show_channels: state.Reducer.show_channels,\n  show_mobile:state.Reducer.show_my_channels_mobile\n\n});\n\nexport default connect(mapStateToProps, { show_all_channels, show_my_channels_mobile })(MobileNav);\n","/home/sebastian/Desktop/projects/youngstars/youngstars-test-frontend/src/components/dashboard/MobileAddchannel.js",["99","100","101"],"import React, { useEffect, useState } from \"react\";\nimport \"../../sass/dashboard/_dashboard.scss\";\nimport Care from \"../../imgs/care.png\";\nimport Goat from \"../../imgs/goat.png\";\nimport Cat from \"../../imgs/cat.png\";\nimport Dog from \"../../imgs/dog.png\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { get_my_channels } from \"../../redux/actions\";\n//<a href='https://pngtree.com/so/care'>care png from pngtree.com</a>\nfunction MobileAddchannel({ my_channels, get_my_channels }) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(get_my_channels());\n  }, []);\n\n  const getImage = (animal) => {\n    switch (animal) {\n      case \"Dog\":\n        return Dog;\n      case \"Goat\":\n        return Goat;\n      case \"Cat\":\n        return Cat;\n      default:\n        return Dog;\n    }\n  };\n\n  return (\n      <div className=\"second-board-two\">\n        <h3>My Channels</h3>\n        <ul>\n          {my_channels[0] !== \"Something went wrong.\" ? my_channels.map((channel) => (\n            <li>\n              <img src={getImage(channel)} alt=\"dog\" />\n              {channel}\n            </li>\n          )):  <label style={{\n              textAlign:\"center\",\n              color:\"orangered\"\n          }}>\n          {my_channels}\n        </label> }\n        </ul>\n      </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  my_channels: state.Reducer.my_channels,\n});\n\nexport default connect(mapStateToProps, { get_my_channels })(MobileAddchannel);\n\n",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":15},{"ruleId":"106","severity":1,"message":"110","line":12,"column":9,"nodeType":"108","messageId":"109","endLine":12,"endColumn":17},{"ruleId":"106","severity":1,"message":"111","line":1,"column":28,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"112","severity":1,"message":"113","line":14,"column":6,"nodeType":"114","endLine":14,"endColumn":8,"suggestions":"115"},{"ruleId":"106","severity":1,"message":"116","line":4,"column":8,"nodeType":"108","messageId":"109","endLine":4,"endColumn":11},{"ruleId":"106","severity":1,"message":"117","line":5,"column":8,"nodeType":"108","messageId":"109","endLine":5,"endColumn":11},{"ruleId":"106","severity":1,"message":"118","line":1,"column":8,"nodeType":"108","messageId":"109","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"119","line":14,"column":3,"nodeType":"108","messageId":"109","endLine":14,"endColumn":17},{"ruleId":"106","severity":1,"message":"120","line":1,"column":20,"nodeType":"108","messageId":"109","endLine":1,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":156,"column":23,"nodeType":"123","messageId":"124","endLine":156,"endColumn":25},{"ruleId":"102","replacedBy":"125"},{"ruleId":"104","replacedBy":"126"},{"ruleId":"112","severity":1,"message":"127","line":11,"column":6,"nodeType":"114","endLine":11,"endColumn":16,"suggestions":"128"},{"ruleId":"106","severity":1,"message":"129","line":16,"column":13,"nodeType":"108","messageId":"109","endLine":16,"endColumn":17},{"ruleId":"106","severity":1,"message":"130","line":16,"column":19,"nodeType":"108","messageId":"109","endLine":16,"endColumn":26},{"ruleId":"106","severity":1,"message":"131","line":5,"column":19,"nodeType":"108","messageId":"109","endLine":5,"endColumn":30},{"ruleId":"106","severity":1,"message":"111","line":1,"column":28,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"106","severity":1,"message":"132","line":3,"column":8,"nodeType":"108","messageId":"109","endLine":3,"endColumn":12},{"ruleId":"112","severity":1,"message":"113","line":14,"column":6,"nodeType":"114","endLine":14,"endColumn":8,"suggestions":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'login' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'get_my_channels'. Either include them or remove the dependency array. If 'get_my_channels' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["136"],"'Cat' is defined but never used.","'Dog' is defined but never used.","'sagas' is defined but never used.","'SIGNUP_SUCCESS' is defined but never used.","'call' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["134"],["135"],"React Hook useEffect has a missing dependency: 'get_all_channels'. Either include it or remove the dependency array. If 'get_all_channels' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["137"],"'name' is assigned a value but never used.","'checked' is assigned a value but never used.","'useDispatch' is defined but never used.","'Care' is defined but never used.",["138"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"139","fix":"143"},"Update the dependencies array to be: [dispatch, get_my_channels]",{"range":"144","text":"145"},"Update the dependencies array to be: [dispatch, get_all_channels]",{"range":"146","text":"147"},{"range":"148","text":"145"},[580,582],"[dispatch, get_my_channels]",[380,390],"[dispatch, get_all_channels]",[586,588]]